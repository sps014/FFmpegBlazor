@page "/tomp3"
@using FFmpegBlazor
@inject IJSRuntime Runtime
@using Microsoft.AspNetCore.Components.Forms

<MudInputFile OnChanged="fileLoad" Color="Color.Warning">
    Open Mp4 File
</MudInputFile>
<br />
<br />
<video width="300" height="200" autoplay controls src="@url" />
<br />
<br />
@if (started)
{

    @if (pgs == 0)
    {
        <MudAlert Severity="@Severity.Warning" Dense="true">
            Please Wait while Fetching FFmpeg in Browser &nbsp;<br /><br />
            <MudProgressLinear Color="Color.Warning" Size="Size.Medium" Indeterminate="true" />
        </MudAlert>

    }
    else
    {
        <MudAlert Severity="@Severity.Info" Dense="true">
            Please Wait while Converting to Mp3 &nbsp;<br /><br />
        <MudProgressLinear Color="Color.Success" Size="Size.Medium" Value="pgs" Min="0" Max="100" /> @pgs%
        </MudAlert>
    }
}
else
{
    <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="Process" Color="Color.Error">Convert Mp3</MudButton>
}
<br />
<br />
<audio controls src="@url2" />

<br />
<br />

@if (started && pgs==0)
{
    <MudAlert Severity="Severity.Info">View Logs in Console</MudAlert>
}

@code
{
    string url; string url2;
    FFMPEG ff;
    byte[] buffer;
    bool started = false;
    int pgs;

    protected override async Task OnInitializedAsync()
    {

        if (FFmpegFactory.Runtime == null)
        {
            FFmpegFactory.Logger += WriteLogs;
            FFmpegFactory.Progress += ProgressChange;
        }

        //initialize Library
        await FFmpegFactory.Init(Runtime);
    }

    async void fileLoad(InputFileChangeEventArgs v)
    {
        //get fist file from input selection
        var file = v.GetMultipleFiles()[0];

        //read all bytes
        using var stream = file.OpenReadStream(200000000); //Max size for file that can be read
        buffer = new byte[file.Size];

        //read all bytes
        await stream.ReadAsync(buffer);

        //create a video link from buffer to that video can be played
        url = FFmpegFactory.CreateURLFromBuffer(buffer, "myFile.mp4", file.ContentType);

        //reRender DOM
        StateHasChanged();
    }

    async void Process()
    {
        pgs = 0;
        started = true;

        StateHasChanged();
        //create an instance
        ff = FFmpegFactory.CreateFFmpeg();
        //download all dependencies from cdn
        await ff.Load(); //parameter false means not to trigger events in ffmpeg Clase instance

        if (!ff.IsLoaded) return;

        //write buffer to in-memory files
        ff.WriteFile("myFile.mp4", buffer);

        //Pass CLI argument here equivalent to ffmpeg -i myFile.mp4 output.mp3
        await ff.Run("-i", "myFile.mp4", "output.mp3");

        //delete in-memory file
        //ff.UnlinkFile("myFile.mp4");
    }

    async void ProgressChange(Progress m)
    {
        pgs = (int)(m.Ratio * 100.0f);
       // Console.WriteLine($"Progress {m.Ratio}");

        if (m.Ratio == 1)
        {
            started = false;
            StateHasChanged();
            //get bytepointer from c wasm to c#
            var res = await ff.ReadFile("output.mp3");


            //generate a url from file bufferPointer
            url2 = FFmpegFactory.CreateURLFromBuffer(res, "output.mp3", "audio/mp3");

            //Download the file instantly

            //FFmpegFactory.DownloadBufferAsFile(res, "output.mp3", "audio/mp3");

        }
        StateHasChanged();

    }

    void WriteLogs(Logs m)
    {
        Console.WriteLine(m.Type + " " + m.Message);
    }
}